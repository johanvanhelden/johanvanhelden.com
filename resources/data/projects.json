[
    {
        "name": "Dockerhero",
        "slug": "dockerhero",
        "excerpt": "Dockerhero is a local development tool. Out of the box, it should only take a \"docker-compose start\" to get all your local PHP projects working. Yes, all of them. At the same time.",
        "content": "**Dockerhero is a local development tool. Out of the box, it should only take a \"docker-compose start\" to get all your local PHP projects working. Yes, all of them. At the same time.**\r\n\r\n## The OG Setup\r\nA long time ago the developers at the company where I worked at the time were responsible for setting up their own development environments. So each developer had his own laptop, their own prefered OS they were used to and were running the software of their choosing to work on the projects. So for example, someone was using Windows with XAMPP, another one was using PHP with Apache on Ubuntu and someone else was using MacOS with I don't know what piece of server software.\r\n\r\nThis was all fine until we ran into some issues. We had errors on production that we were unable to reproduce locally because all of the environments were different and no one was running the exact same setup as our production environments.\r\n\r\n## The first solution\r\nSo during my free time I went on a search for a solution. I came across Vagrant and a tool called [PuPHPet](https://puphpet.com/). I spent some time researching those and made a config that mirrored our production environment and tried it out. Everything worked flawlessly. The first time setup and updating the system was very slow, but it worked. And it kept working for a year or two.\r\n\r\nUntil certain packages were not available anymore or versions became deprecated, or were not up-2-date yet. I had to hack the config files way to much it felt like duct tape on top of duct tape. And if someone re-installed his development environment, things might just not work anymore because packages might have been removed from the registry.  \r\n\r\nSo we came full circle again and had a local environment that did not match the production environment.\r\n\r\nBut it was still better than before because at least everyone ran the same setup.\r\n\r\n## Introducing: Dockerhero\r\nAgain, I spent some weekends looking for a different solution and stumbled upon [Docker](https://www.docker.com/) and [Docker Compose](https://docs.docker.com/compose/) and managed to get something up and running that was easy to update, stable, very fast to set up and update. For my company I could simply use an override file to override any changes to the default setup if needed.\r\n\r\nI added a way to add custom, per project, vhost configuration, created documentation, and made the repo public.\r\n\r\nAfter using it myself for a few weeks I felt confident enough to introduce it to the company. And so far there have not been any issues. Everything just works. If we update our PHP version, I just create a new PHP image and either make it part of the core setup or we use the override file to use the new version.\r\n\r\nAn added bonus was that I could use a lot of the configuration code to create a [Docker image](https://github.com/johanvanhelden/circleci-laravel) for CI builds and code quality checks.",
        "url": "https://github.com/johanvanhelden/dockerhero",
        "publish_at": "2019-12-27 12:00:00",
        "created_at": "2019-12-27 17:00:51",
        "updated_at": "2020-01-10 22:43:58"
    },
    {
        "name": "Personal website",
        "slug": "personal-website",
        "excerpt": "My own personal website. Read more about the new techniques I used and what issues I ran into.",
        "content": "## The domain\r\nI've had my domain name, johanvanhelden.com, since 2012. But I never did anything with it. It was just to make sure no one else got a hold of it.\r\n\r\n## The first website\r\nFinally, in 2016, I started experimenting with [Ghost](https://ghost.org/). A blogging platform build for Node.js.\r\n\r\nI still remember it was a real pain to set up on my shared hosting environment. And working with it was also a bit annoying. When I switched to a VPS it became a little easier to host, but still. It just did not feel right. Not very easy to use and I just did not like how it was hosted. I had to use a special node.js process manager to keep the blog running and sometimes it would get stuck.\r\n\r\n## The framework switch\r\nSo a year later I decided to switch to what I knew best. Laravel.\r\n\r\nIn 2016 I created 2 blog posts. So when I was thinking about creating a blogging module for the Laravel rewrite I quickly decided against it. It would take up time and I figured I would never use it. So I simply converted the blog posts to static code, rewrote the Ghost templates to Blade and called it a day. I was surprised how quickly I made the switch. I think it took me 1 evening and everything was finished.\r\n\r\n\r\n## The redesign / rewrite\r\nI was never really happy with the site. It was a site that looked like a blog with 2 static blog posts from 2016 without an ability to manage them. This is what it used to look like:\r\n\r\n![My old website](https://user-images.githubusercontent.com/19389981/72154527-33d44a00-33b1-11ea-86f0-d160491d608c.png)\r\n\r\nSo it started to itch again. I wanted to rebuild the website into something more future-friendly and with a fresh coat of paint. A lot of new tools released that I wanted to try out as well. So that’s what I did. I made a plan, a design in my head and just started.\r\n\r\nThe tools I am using for this website are:\r\n\r\n- [Laravel](https://laravel.com/)\r\n- [Vue.js](https://vuejs.org/)\r\n- [Laravel Nova](https://nova.laravel.com/)\r\n- [Inertia.js](https://inertiajs.com/)\r\n- [Tailwind css](https://tailwindcss.com/)\r\n\r\n## Nova\r\nNova is a tool I used before and I love it. It is very easy to create an admin panel with it. And does not take much time at all. So I decided to use it for the Projects and Tools, so I could make changes to those without having to open a code editor, committing, pushing and deploying anything. And for the future I have a blogging module on my todo list so I can use Nova for that as well. It’s well worth the license costs considering the amount of time and code it saves!\r\n\r\n## Inertia.js\r\nIt was my first time using Inertia.js. I decided to use Inertia.js because the Laracon EU 2019 presentation blew my mind. \r\n\r\nInertia.js lets you quickly build modern single-page Vue.js applications using classic server-side routing and controllers. I knew I wanted a SPA but I really disliked all the overhead. Having to build the API endpoints, having the extra HTTP/axios requests to fetch data after the initial page load. It can also be quite complex at times if you have pages with paginated tables or searches or where you have to fetch data from the back-end based on the URL.\r\n\r\nInertia.js takes all this overhead away! Usually, for SPA’s, I use Vuex to manage states and Vue Router to manage the routing, but in this case, I did not need those. Inertia.js was enough.\r\n\r\n## Tailwind CSS\r\nIt was also my first time to use Tailwind CSS. I heard about it many times and know many people in the Laravel community use it. But I was just so used to bootstrap. It was a bit of a risk to me. I was worried it would take me to much time to create what I want. But the documentation ended up being great. And there are a lot of examples on the internet.\r\n\r\nBut it turned out great. Really easy to use. Sure, I still need the documentation, but I will be using it in future projects as well.\r\n\r\n## The action pattern\r\nI also decided to experiment with [the action pattern](https://freek.dev/1371-refactoring-to-actions) for my website. And I like this pattern a lot and will be using it in more future projects. It’s a great way, for me, to organize domain-like business logic.\r\n\r\n## In conclusion\r\nIt has been fun to rewrite my website using these new tools. But I am also happy that it is finished for now. Please feel free to check out the [source code](https://github.com/johanvanhelden/johanvanhelden.com)!",
        "url": "https://github.com/johanvanhelden/johanvanhelden.com",
        "publish_at": "2019-12-27 12:00:00",
        "created_at": "2019-12-27 17:01:13",
        "updated_at": "2020-01-10 22:33:26"
    },
    {
        "name": "Hero CLI",
        "slug": "hero-cli",
        "excerpt": "A companion application to Dockerhero for easy and quick local development.",
        "content": "**A companion application to [Dockerhero](https://github.com/johanvanhelden/dockerhero) for easy and quick local development.**\r\n\r\nAs a developer there a quite a few steps to get up and running with a project.\r\n\r\nIf you start from scratch you might have to clone the repository, create the database, the database user and prepare the .env file.\r\n\r\nNext, you might to install the dependencies, migrate the database, run seeders, compile assets and any other custom commands you have for your project.\r\n\r\nSometimes you forget to do a step and run into errors. For example a missing column because you forgot to migrate.\r\n\r\nI always enjoy solving my own problems and make my life easier. So I decided to play around with a new project that I discovered, [Laravel Zero](https://laravel-zero.com/), to see if I could build something that could solve my need for easy project bootstrapping. \r\n\r\n[Laravel Zero](https://laravel-zero.com/) is a micro-framework for console applications. Built on top of the Laravel components. So perfect for what I am trying to build.\r\n\r\n## The initial setup\r\nThis is the most hard-coded part of Hero CLI. The `setup:project` command is used if you are working on a project for the first time. It will prepare the environment file for you, based on the `.env.example` and prepare the entire database.\r\n\r\nIt was a bit tricky to build this command (and it feels like to most \"hacky\" piece of Hero CLI to be honest). It parses the .env of the project you want to setup using `dotenv` and executes a bunch of `mysql` commands inside of [Dockerhero](https://github.com/johanvanhelden/dockerhero) to realize this.\r\n\r\n## Recipes\r\nFor the commands, I wanted to make something that was customizable. I wanted to avoid as much hardcoded project logic as possible. Even though, at the time, I was not planning on making the application open source, I just did not want to dive into the code if something changed. So I came up with the idea for a \"recipe\". A recipe, just like the cooking one, defines what needs to be done. In our case for a certain development task.\r\n\r\nFor example, if you want to \"update\" a project you might want to:\r\n- Install composer dependencies\r\n- Migrate the database\r\n- Generate IDE-helpers\r\n- Export translations to a JS file\r\n- Build assets\r\n\r\nA `.yml` file made the most sense to me to define how to actually perform those steps. And this is the end result of a Hero CLI recipe:\r\n\r\n```\r\nupdate:\r\n  - command: \"composer install\"\r\n    environment: docker\r\n  - command: \"./artisan migrate\"\r\n    environment: docker\t\r\n  - command: \"./artisan ide-helper:generate\"\r\n    environment: docker\r\n  - command: \"./artisan ide-helper:meta\"\r\n    environment: docker\r\n  - command: \"./artisan custom:export-translations-js\"\r\n    environment: docker\r\n  - command: \"yarn dev\"\r\n    environment: local\r\n```\r\n\r\nSo when you execute: `hero recipe update my-project` it will execute all those tasks for the `my-project` project.\r\n\r\nBecause Hero CLI is tightly integrated with [Dockerhero](https://github.com/johanvanhelden/dockerhero), you only have to tell Hero CLI you want it executed into docker and it will take care of the rest.\r\n\r\nYou can also make an additional update-fresh recipe that will, instead of a `migrate` will perform a `migrate:fresh --seed`.\r\nYou can add as many recipes as you want to the recipe file.\r\n\r\nFor more information on how to set everything up and what you can do with Hero CLI, you can [visit the project](https://github.com/johanvanhelden/hero-cli) on GitHub.",
        "url": "https://github.com/johanvanhelden/hero-cli",
        "publish_at": "2019-12-27 12:00:00",
        "created_at": "2019-12-27 17:01:40",
        "updated_at": "2020-01-22 17:13:34"
    }
]
