version: 2

defaults: &defaults
  working_directory: /root/johanvanhelden.com
  docker:
    - image: johanvanhelden/circleci-laravel:latest

jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name: Add Yarn globally
          command: echo 'export PATH=/root/.yarn/bin/:$PATH' >> $BASH_ENV
      - run:
          name: Add Composer globally
          command: echo 'export PATH=/root/.composer/vendor/bin/:$PATH' >> $BASH_ENV
      - run:
          name: Add NVM globally
          command: echo 'export NVM_DIR=/root/.nvm' && echo 'source /root/.nvm/nvm.sh' >> $BASH_ENV
      - checkout
      - run:
          name: Prepare the environment file
          command: cp ./.circleci/.env.circleci ./.env && cp ./.circleci/.env.circleci ./.env.testing
      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}-{{ arch }}
      - run:
          name: Composer install
          command: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}-{{ arch }}
          paths:
            - vendor
      - run:
          name: Security
          command: ./.circleci/scripts/security.sh
      - run:
          name: Validation
          command: ./.circleci/scripts/validation.sh
      - run:
          name: Analysis
          command: ./.circleci/scripts/analysis.sh
      - restore_cache:
          keys:
            - node-v1-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install NPM dependencies
          command: yarn install
      - run:
          name: Lint assets
          command: yarn lint
      - run:
          name: Build assets
          command: ./buildHook.sh $PWD
      - save_cache:
          key: node-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules
            - /usr/local/share/.cache/yarn/v1
      - run:
          name: Initialize database
          command: ./.circleci/scripts/initialize-database.sh
      - run:
          name: Unit and Feature Tests
          command: composer test-fresh
      - run:
          name: Test coverage
          command: ./.circleci/scripts/test-coverage.sh
      - run:
          name: Migrations
          command: php artisan migrate:fresh --env=testing --no-interaction
      - run:
          name: Seeders
          command: php artisan db:seed --env=testing --no-interaction
      - persist_to_workspace:
          root: /root
          paths:
            - johanvanhelden.com

  browser_tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /root
      - run:
          name: Initialize database
          command: ./.circleci/scripts/initialize-database.sh
      - run:
          name: Migrations
          command: php artisan migrate --env=testing --no-interaction
      - run:
          name: Seeders
          command: php artisan db:seed --env=testing --no-interaction
      - run:
          name: Browser tests
          command: ./.circleci/scripts/browser-tests.sh
      - store_artifacts:
          path: ./tests/Browser/console
      - store_artifacts:
          path: ./tests/Browser/screenshots

  deploy_staging:
    <<: *defaults
    docker:
      - image: alpine
    working_directory: ~/
    steps:
      - run: apk add curl
      - run: curl -X GET ${STAGE_DEPLOY_WEBHOOK}

  deploy_production:
    <<: *defaults
    docker:
      - image: alpine
    working_directory: ~/
    steps:
      - run: apk add curl
      - run: curl -X GET ${PRODUCTION_DEPLOY_WEBHOOK}

  notify_sentry_deploy:
    <<: *defaults
    docker:
      - image: alpine
    working_directory: ~/
    environment:
      SENTRY_ORG: johan-van-helden
      SENTRY_PROJECT: johan-van-helden
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout
      - run: apk add curl && apk add bash && apk add git && apk add openssh
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - browser_tests:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
      - deploy_staging:
          requires:
            - build
            - browser_tests
          filters:
            branches:
              only:
                - develop
      - deploy_production:
          requires:
            - build
            - browser_tests
          filters:
            branches:
              only:
                - master
      - notify_sentry_deploy:
          requires:
            - build
            - browser_tests
            - deploy_production
          filters:
            branches:
              only:
                - master
