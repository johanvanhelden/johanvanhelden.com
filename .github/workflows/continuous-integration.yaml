name: Continuous Integration

on: push

jobs:
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Up PHP and Tools
        uses: shivammathur/setup-php@master
        with:
          php-version: "8.1"
          tools: composer:v2
          coverage: none

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Static Code Analysis
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

  code-style:
    name: Code Style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Up PHP and Tools
        uses: shivammathur/setup-php@master
        with:
          php-version: "8.1"
          tools: composer:v2, phpcs, php-cs-fixer, phpmd, phpcpd
          coverage: none

      - name: Install NPM
        run: npm install

      - name: Syntax Errors
        run: find app config lang routes tests -name "*.php" -print0 | xargs -0 -n1 -P8 php -l

      - name: PHP_CodeSniffer
        run: phpcs

      - name: PHP-CS-Fixer
        run: php-cs-fixer fix app config lang routes tests --dry-run --diff --allow-risky=yes --config=.php-cs-fixer.php

      - name: PHPMD
        run: phpmd app text phpmd.xml

      - name: PHPCPD
        run: phpcpd app

      - name: Lint Assets
        run: npm run lint

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Up PHP and Tools
        uses: shivammathur/setup-php@master
        with:
          php-version: "8.1"
          tools: composer:v2
          coverage: none

      - name: Check Composer Packages
        uses: symfonycorp/security-checker-action@v4

      - name: Check NPM Packages
        run: npm audit --production

  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Up PHP and Tools
        uses: shivammathur/setup-php@master
        with:
          php-version: "8.1"
          extensions: bz2, bcmath, curl, exif, gd, imagick, imap, intl, mysqli, pcntl, pcov, pdo_mysql, soap, xmlrpc, xsl, zip, iconv, pdo
          tools: composer:v2
          coverage: pcov

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Install NPM
        run: npm install

      - name: Setup PHPUnit Environment
        run: yes | cp .env.testing.example .env

      - name: Build Assets
        run: ./buildHook.sh $PWD

      - name: Run PHPUnit Tests
        run: composer dump-autoload && composer test

      - name: Run Test Coverage Report
        run: ./vendor/bin/phpunit --coverage-clover ./coverage.xml

      - name: Check Test Coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: "95"
          filename: "coverage.xml"

      - name: Clear Laravel Logs
        run: rm ./storage/logs/*.log -f

      - name: Setup Dusk Environment
        run: yes | cp .env.dusk.local.example .env

      - name: Set the Chrome Driver
        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d " " -f3 | cut -d "." -f1`

      - name: Start Server
        run: php artisan serve --port=8000 &

      - name: Run Dusk
        run: composer test-browser
        env:
          APP_URL: "http://127.0.0.1:8000"

      - name: Upload Dusk Artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Dusk Artifacts
          path: |
            ./tests/Browser/screenshots
            ./tests/Browser/console
            ./storage/logs

  sentry-release:
    name: Sentry Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'merged'))
    needs: [code-analysis, code-style, security-check, tests]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create a Sentry Release
        uses: getsentry/action-release@v1.0.1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_ORG: johan-van-helden
        with:
          environment: production

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'merged'))
    needs: [code-analysis, code-style, security-check, tests]

    steps:
      - uses: actions/checkout@v3

      - name: Trigger Forge Staging Webhook
        run: |
          [ -n "${{ secrets.FORGE_WEBHOOK_STAGING }}" ] && curl "${{ secrets.FORGE_WEBHOOK_STAGING }}" || echo "No deploy webhook set"

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'merged'))
    needs: [code-analysis, code-style, security-check, tests]

    steps:
      - uses: actions/checkout@v3

      - name: Trigger Forge Production Webhook
        run: |
          [ -n "${{ secrets.FORGE_WEBHOOK_PRODUCTION }}" ] && curl "${{ secrets.FORGE_WEBHOOK_PRODUCTION }}" || echo "No deploy webhook set"
